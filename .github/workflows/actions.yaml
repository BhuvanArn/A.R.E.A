name: Area

on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
  pull_request:
    branches-ignore:
      - 'ga-ignore-**'
env:
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-DEV-500-NAN-5-2-area-toavina.andriamanampisoa.git"

jobs:
  check_health:
    runs-on: ubuntu-latest

    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Create .env file from Secret
      - name: get environment variables
        id: import-env
        run: |
          echo "${{ secrets.ENV_FILE }}" >> .env
      - uses: cardinalby/export-env-action@v2
        id: exportEnv
        with:
          mask: true
          export: false
          envFile: '.env'

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Start Docker Compose services
        id: startServices
        run: docker compose up -d --wait
        env:
          POSTGRES_DB: ${{ steps.exportEnv.outputs.POSTGRES_DB }}
          POSTGRES_USER: ${{ steps.exportEnv.outputs.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ steps.exportEnv.outputs.POSTGRES_PASSWORD }}
          KEYSTORE_PASSWORD: ${{ steps.exportEnv.outputs.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ steps.exportEnv.outputs.KEY_ALIAS }}
          KEY_PASSWORD: ${{ steps.exportEnv.outputs.KEY_PASSWORD }}
          EXPOSE_PORT_CLIENT: 8081
          EXPOSE_PORT_SERVER: 8080

          SPOTIFY_CLIENT_ID: ${{ steps.exportEnv.outputs.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ steps.exportEnv.outputs.SPOTIFY_CLIENT_SECRET }}
          DROPBOX_CLIENT_ID: ${{ steps.exportEnv.outputs.DROPBOX_CLIENT_ID }}
          DROPBOX_CLIENT_SECRET: ${{ steps.exportEnv.outputs.DROPBOX_CLIENT_SECRET }}
          GITHUB_CLIENT_ID: ${{ steps.exportEnv.outputs.GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ steps.exportEnv.outputs.GITHUB_CLIENT_SECRET }}

      # Remove .env file for security reasons
      - name: remove .env file
        run: rm -f .env

      - name: Print Docker Compose logs
        if: failure()
        run: docker compose logs

      - name: Print area-db-1 logs
        if: failure()
        run: docker logs area-db-1

      - name: Print area-server-1 logs
        if: failure()
        run: docker logs area-server-1

      - name: Print area-client_web-1 logs
        if: failure()
        run: docker logs area-client_web-1

      - name: Stop Docker Compose services
        if: always()
        run: docker compose down -v --remove-orphans

  tests_run:
    runs-on: ubuntu-latest
    needs:
      - check_health

    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Create .env file from Secret
      - name: get environment variables
        id: import-env
        run: |
          echo "${{ secrets.ENV_FILE }}" >> .env
      - uses: cardinalby/export-env-action@v2
        id: exportEnv
        with:
          mask: true
          export: false
          envFile: '.env'

      # Remove .env file for security reasons
      - name: remove .env file
        run: rm -f .env

      - name: Start Docker Compose services
        id: startServices
        run: docker compose up -d --wait
        env:
          POSTGRES_DB: ${{ steps.exportEnv.outputs.POSTGRES_DB }}
          POSTGRES_USER: ${{ steps.exportEnv.outputs.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ steps.exportEnv.outputs.POSTGRES_PASSWORD }}
          KEYSTORE_PASSWORD: ${{ steps.exportEnv.outputs.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ steps.exportEnv.outputs.KEY_ALIAS }}
          KEY_PASSWORD: ${{ steps.exportEnv.outputs.KEY_PASSWORD }}
          EXPOSE_PORT_CLIENT: 8081
          EXPOSE_PORT_SERVER: 8080

          SPOTIFY_CLIENT_ID: ${{ steps.exportEnv.outputs.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ steps.exportEnv.outputs.SPOTIFY_CLIENT_SECRET }}
          DROPBOX_CLIENT_ID: ${{ steps.exportEnv.outputs.DROPBOX_CLIENT_ID }}
          DROPBOX_CLIENT_SECRET: ${{ steps.exportEnv.outputs.DROPBOX_CLIENT_SECRET }}
          GITHUB_CLIENT_ID: ${{ steps.exportEnv.outputs.GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ steps.exportEnv.outputs.GITHUB_CLIENT_SECRET }}

        # run tests for every service
      - name: Run tests for services
        run: |
          services=$(docker compose config --services)
            for service in $services; do
              echo "Checking for tests in $service"
              if docker compose exec $service test -x /app/tests.sh; then
                echo "Running tests for $service"
                docker compose exec $service /app/tests.sh
              else
                echo "No tests found for $service"
              fi
            done
        env:
          POSTGRES_DB: ${{ steps.exportEnv.outputs.POSTGRES_DB }}
          POSTGRES_USER: ${{ steps.exportEnv.outputs.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ steps.exportEnv.outputs.POSTGRES_PASSWORD }}
          KEYSTORE_PASSWORD: ${{ steps.exportEnv.outputs.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ steps.exportEnv.outputs.KEY_ALIAS }}
          KEY_PASSWORD: ${{ steps.exportEnv.outputs.KEY_PASSWORD }}
          EXPOSE_PORT_CLIENT: 8081
          EXPOSE_PORT_SERVER: 8080

          SPOTIFY_CLIENT_ID: ${{ steps.exportEnv.outputs.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ steps.exportEnv.outputs.SPOTIFY_CLIENT_SECRET }}
          DROPBOX_CLIENT_ID: ${{ steps.exportEnv.outputs.DROPBOX_CLIENT_ID }}
          DROPBOX_CLIENT_SECRET: ${{ steps.exportEnv.outputs.DROPBOX_CLIENT_SECRET }}
          GITHUB_CLIENT_ID: ${{ steps.exportEnv.outputs.GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ steps.exportEnv.outputs.GITHUB_CLIENT_SECRET }}

      - name: Stop Docker Compose services
        if: always()
        run: docker compose down -v --remove-orphans

  push_to_mirror:
    runs-on: ubuntu-latest
    needs:
      - tests_run

    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL}}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
