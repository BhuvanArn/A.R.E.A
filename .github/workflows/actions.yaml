name: Area

on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
  pull_request:
    branches-ignore:
      - 'ga-ignore-**'
env:
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-DEV-500-NAN-5-2-area-toavina.andriamanampisoa.git"

jobs:
  check_health:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Create .env file from Secret
      - name: get environment variables
        id: import-env
        run: |
          echo "${{ secrets.ENV_FILE }}" >> .env
      - uses: cardinalby/export-env-action@v2
        id: export-env
        with:
          mask: true
          envFile: '.env'

      - name: Start Docker Compose services
        run: docker compose up -d --build
        env:
          POSTGRES_DB: ${{ steps.export-env.outputs.POSTGRES_DB }}
          POSTGRES_USER: ${{ steps.export-env.outputs.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ steps.export-env.outputs.POSTGRES_PASSWORD }}
          EXPOSE_PORT_CLIENT: ${{ steps.export-env.outputs.EXPOSE_PORT_CLIENT }}
          EXPOSE_PORT_SERVER: ${{ steps.export-env.outputs.EXPOSE_PORT_SERVER }}

      # Remove .env file for security reasons
      - name: remove .env file
        run: rm -f .env

      - name: Check service health
        uses: jaracogmbh/docker-compose-health-check-action@v1.0.0
        with:
          max-retries: 30
          retry-interval: 5
          compose-file: "docker-compose.yml"
          skip-exited: "true"
          skip-no-healthcheck: "true"

      - name: Print Docker Compose logs
        if: failure()
        run: docker compose logs

      - name: Print area-db-1 logs
        if: failure()
        run: docker logs area-db-1

      - name: Stop Docker Compose services
        if: always()
        run: docker compose down -v --remove-orphans

  push_to_mirror:
    needs: check_health
    runs-on: ubuntu-latest

    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Checkout fetch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL}}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
