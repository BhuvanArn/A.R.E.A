routes:
  - name: "auth-login"
    host: "csharp_service"
    port: 8080
    condition: "^/auth/login$"
    realPath: "/auth/login"
    summary: "User Login"
    description: "Authenticates a user and provides an access token."
    method: "POST"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              Email:
                type: "string"
                example: "example@app.com"
              Password:
                type: "string"
                example: "password"
    responses:
      200:
        description: "Login successful and access token provided."
      401:
        description: "Invalid credentials."

  - name: "auth-register"
    host: "csharp_service"
    port: 8080
    condition: "^/auth/register$"
    realPath: "/auth/register"
    summary: "User Registration"
    description: "Registers a new user."
    method: "POST"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              Username:
                type: "string"
                example: "username"
              Email:
                type: "string"
                example: "example@app.com"
              Password:
                type: "string"
                example: "password"
              ConfirmedPassword:
                type: "string"
                example: "password"
    responses:
      200:
        description: "Registration successful."
      401:
        description: "Invalid data (passwords do not match, email already exists, etc)."

  - name: "auth-user-information"
    host: "csharp_service"
    port: 8080
    condition: "^/auth/userinformation$"
    realPath: "/auth/userinformation"
    summary: "Get User Information"
    description: "Retrieves information about the user based on the provided JWT token."
    method: "GET"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    responses:
      200:
        description: "User information retrieved successfully."
      401:
        description: "Unauthorized or invalid JWT token."

  - name: "auth-forget-password"
    host: "csharp_service"
    port: 8080
    condition: "^/auth/forget-password$"
    realPath: "/auth/forget-password"
    summary: "Forgot Password"
    description: "Send an email to user in case they lost their password."
    method: "POST"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              Email:
                type: "string"
                example: "area@gmail.com"
    responses:
      200:
        description: "Email sent successfully."
      401:
        description: "Invalid data (wrong email, couldn't connect to SMTP, etc)."
      500:
        description: "Internal server error (email couldn't be sent, etc)."

  - name: "auth-reset-password"
    host: "csharp_service"
    port: 8080
    condition: "^/auth/reset-password$"
    realPath: "/auth/reset-password"
    summary: "Reset Password"
    description: "Resets a user's password. The user must be logged in to reset their password."
    method: "POST"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              Password:
                type: "string"
                example: "password"
              NewPassword:
                type: "string"
                example: "new_password"
    responses:
      200:
        description: "Password reset successful."
      401:
        description: "Invalid data (old password incorrect, etc)."
      500:
        description: "Internal server error (bad JWT token, etc)."

  - name: "oauth-google-login"
    host: "csharp_service"
    port: 8080
    condition: "^/auth/google-login$"
    realPath: "/auth/google-login"
    summary: "Google Login"
    description: "Authenticates a user using Google OAuth and provides an access token."
    method: "POST"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              Token:
                type: "string"
                example: "google_oauth_token"
    responses:
      200:
        description: "Login successful and access token provided."
      500:
        description: "Invalid Google OAuth token."

  - name: "oauth-discord-login"
    host: "csharp_service"
    port: 8080
    condition: "^/auth/discord-login$"
    realPath: "/auth/discord-login"
    summary: "Discord Login"
    description: "Authenticates a user via Discord credentials and provides a Discord token."
    method: "POST"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              Email:
                type: "string"
                example: "user@example.com"
              Password:
                type: "string"
                example: "password123"
    responses:
      200:
        description: "Discord token retrieved successfully."
      401:
        description: "Unauthorized or invalid credentials."

  - name: "oauth-spotify-authorize"
    host: "oauth_service"
    port: 80
    condition: "^/oauth/spotify/authorize$"
    realPath: "/oauth/spotify/authorize"
    summary: "Spotify OAuth authorize process"
    description: "Spotify OAuth authorize process"
    method: "POST"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              scopes:
                type: "string"
                example: "user-read-email user-read-private"
              redirect_url:
                type: "string"
                example: "http://localhost:8081/callback"
    responses:
      200:
        description: "Spotify OAuth url returned succesfully"
      401:
        description: "Parameters scopes or redirect_url not specified"

  - name: "oauth-spotify-access-token"
    host: "oauth_service"
    port: 80
    condition: "^/oauth/spotify/access_token$"
    realPath: "/oauth/spotify/access_token"
    summary: "Spotify OAuth user token fetch"
    description: "This is the route to fetch a token to act on behalf of a user"
    method: "POST"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "string"
                example: "AQBFvuU8UV6gicVjPkuY-vAaJ6f9jvOWUfvuHOnoJZD_Y_DQg0mzu26acXKinavXfo1EwP3_qvd_Lhc89dMQKac0yv3r62htU7Gga0ScOivDnoexg51I5p4wJpeKIInJR_V97FvUzAVMsliC0nMz7IcyI9G4da3WQm5qgoic0-6_GgMNPpkznZVpf2G28YnugUYbKc8"
              redirect_url:
                type: "string"
                example: "http://localhost:8081/callback"
    responses:
      200:
        description: "Spotify OAuth token returned succesfully"
      401:
        description: "Parameters code or redirect_url not specified"

  - name: "oauth-dropbox-authorize"
    host: "oauth_service"
    port: 80
    condition: "^/oauth/dropbox/authorize$"
    realPath: "/oauth/dropbox/authorize"
    summary: "Dropbox OAuth authorize process"
    description: "Dropbox OAuth authorize process"
    method: "POST"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              redirect_url:
                type: "string"
                example: "http://localhost:8081/callback"
    responses:
      200:
        description: "Dropbox OAuth url returned succesfully"
      401:
        description: "Parameters scopes or redirect_url not specified"

  - name: "oauth-dropbox-access-token"
    host: "oauth_service"
    port: 80
    condition: "^/oauth/dropbox/access_token$"
    realPath: "/oauth/dropbox/access_token"
    summary: "Dropbox OAuth user token fetch"
    description: "This is the route to fetch a token to act on behalf of a user"
    method: "POST"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "string"
                example: "AQBFvuU8UV6gicVjPkuY-vAaJ6f9jvOWUfvuHOnoJZD_Y_DQg0mzu26acXKinavXfo1EwP3_qvd_Lhc89dMQKac0yv3r62htU7Gga0ScOivDnoexg51I5p4wJpeKIInJR_V97FvUzAVMsliC0nMz7IcyI9G4da3WQm5qgoic0-6_GgMNPpkznZVpf2G28YnugUYbKc8"
              redirect_url:
                type: "string"
                example: "http://localhost:8081/callback"
    responses:
      200:
        description: "Dropbox OAuth token returned succesfully"
      401:
        description: "Parameters code or redirect_url not specified"


    #------------------ Area-Related Operations ------------------#


  - name: "area-list"
    host: "csharp_service"
    port: 8080
    condition: "^/area$"
    realPath: "/area"
    summary: "Get Areas"
    description: "Retrieves a list of available areas."
    method: "GET"
    responses:
      200:
        description: "List of areas."

  - name: "get-services"
    host: "csharp_service"
    port: 8080
    condition: "^/area/services/(true|false)$"
    realPath: "/area/services/{GetArea}"
    summary: "Get Services"
    description: "Retrieves a list of services that you subscribed to."
    method: "GET"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    responses:
      200:
        description: "List of services."

  - name: "subscribe-service"
    host: "csharp_service"
    port: 8080
    condition: "^/area/subscribe_service$"
    realPath: "/area/subscribe_service"
    summary: "Subscribe Service"
    description: "Subscribes to a service in an area."
    method: "POST"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                example: "facebook"
              auth:
                type: "object"
                properties:
                  token:
                    type: "string"
                    example: "3421432423"
    responses:
      200:
        description: "Subscription successful."
      400:
        description: "Invalid subscription data."

  - name: "unsubscribe-service"
    host: "csharp_service"
    port: 8080
    condition: "^/area/unsubscribe_service$"
    realPath: "/area/unsubscribe_service"
    summary: "Unsubscribe Service"
    description: "Unsubscribes from a service in an area. On success, It will return a list of the remaining services."
    method: "POST"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                example: "facebook"
    responses:
      200:
        description: "Unsubscription successful (no data)."
      401:
        description: "Invalid unsubscription data/not subscribed to the service."

  - name: "add-actions"
    host: "csharp_service"
    port: 8080
    condition: "^/area/addactions$"
    realPath: "/area/addactions"
    summary: "Add actions"
    description: "Adds a new actions for a given service."
    method: "POST"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              ServiceId:
                type: "guid"
                example: "432432-84932-4893894-87348"
              Name:
                type: "string"
                example: "MyCustomAction"
              DisplayName:
                type: "string"
                example: "Discord"
              TriggerConfig:
                type: "string"
                example: "some-trigger-data"
    responses:
      200:
        description: "Action added successfully."
      401:
        description: "Unauthorized or invalid data."

  - name: "delete-areas"
    host: "csharp_service"
    port: 8080
    condition: "^/area/delete_areas$"
    realPath: "/area/delete_areas"
    summary: "Delete Areas"
    description: "Deletes specified areas using user authentication."
    method: "DELETE"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              ServiceId:
                type: "number"
                example: 1
              ActionId:
                type: "number"
                example: 2
              ReactionId:
                type: "number"
                example: 3
    responses:
      200:
        description: "Deletion successful."
      401:
        description: "Unauthorized access or invalid token."
      400:
        description: "Bad request or invalid data."

  - name: "add-reactions"
    host: "csharp_service"
    port: 8080
    condition: "^/area/addreactions$"
    realPath: "/area/addreactions"
    summary: "Add Reaction"
    description: "Adds a new reaction for a given service and action."
    method: "POST"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              ServiceId:
                type: "number"
                example: 101
              ActionId:
                type: "number"
                example: 202
              Name:
                type: "string"
                example: "MyCustomReaction"
              ExecutionConfig:
                type: "string"
                example: "some-execution-configuration"
    responses:
      200:
        description: "Reaction added successfully."
      401:
        description: "Unauthorized or invalid data."

  - name: "actions-reactions"
    host: "csharp_service"
    port: 8080
    condition: "^/area/services/([^/]+)/actions_reactions$"
    realPath: "/area/services/{serviceName}/actions_reactions"
    summary: "Get Actions and Reactions"
    description: "Retrieves a list of actions and reactions available in a service (you must be subscribed to the service)."
    method: "GET"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    responses:
      200:
        description: "List of actions and reactions."
      401:
        description: "Not subscribed to the service/bad service name/bad JWT token."

  - name: "action"
    host: "csharp_service"
    port: 8080
    condition: "^/area/services/([^/]+)/action$"
    realPath: "/area/services/{serviceName}/action"
    summary: "Get all actions of the service"
    description: "Retrieves a list of actions available in a service (you must be subscribed to the service)."
    method: "GET"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    responses:
      200:
        description: "List of actions."
      401:
        description: "Not subscribed to the service/bad service name/bad JWT token."

  - name: "reaction"
    host: "csharp_service"
    port: 8080
    condition: "^/area/services/([^/]+)/reaction$"
    realPath: "/area/services/{serviceName}/reaction"
    summary: "Get all reactions of the service"
    description: "Retrieves a list of reactions available in a service (you must be subscribed to the service)."
    method: "GET"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    responses:
      200:
        description: "List of reactions."
      401:
        description: "Not subscribed to the service/bad service name/bad JWT token."

  - name: "about"
    host: "service-about"
    port: 80
    condition: "^/about.json$"
    realPath: "/about.json"
    summary: "About Information"
    description: "Provides information about the backend services. All implemented services, their actions, and reactions are listed here."
    method: "GET"
    responses:
      200:
        description: "About details."

  - name: "area-update-service"
    host: "csharp_service"
    port: 8080
    condition: "^/area/update_service$"
    realPath: "/area/update_service"
    summary: "Update a service"
    description: "Update auth of a service"
    method: "PUT"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              NewAuth:
                type: "string"
                example: "{ token:blablabla }"
              ServiceId:
                type: "guid"
                example: "432432-84932-4893894-87348"
    responses:
      200:
        description: "Updated successfully."
      401:
        description: "Unauthorized or invalid credentials."

  - name: "area-update-area"
    host: "csharp_service"
    port: 8080
    condition: "^/area/update_area$"
    realPath: "/area/update_area"
    summary: "Update an area"
    description: "Update display name or state of an area"
    method: "PUT"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              DisplayName:
                type: "string"
                example: "discord"
              State:
                type: "number"
                example: 1
              AreaId:
                type: "guid"
                example: "432432-84932-4893894-87348"
    responses:
      200:
        description: "Updated successfully."
      401:
        description: "Unauthorized or invalid credentials."

  - name: "area-update-action"
    host: "csharp_service"
    port: 8080
    condition: "^/area/update_action$"
    realPath: "/area/update_action"
    summary: "Update an action"
    description: "Update trigger config of an action"
    method: "PUT"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              TriggerConfig:
                type: "string"
                example: "{blablabla}"
    responses:
      200:
        description: "Updated successfully."
      401:
        description: "Unauthorized or invalid credentials."

  - name: "area-update-reaction"
    host: "csharp_service"
    port: 8080
    condition: "^/area/update_reaction$"
    realPath: "/area/update_reaction"
    summary: "Update an reaction"
    description: "Update execution config of an reaction"
    method: "PUT"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              ExecutionConfig:
                type: "string"
                example: "{blablabla}"
    responses:
      200:
        description: "Updated successfully."
      401:
        description: "Unauthorized or invalid credentials."

  - name: "auth-change-password"
    host: "csharp_service"
    port: 8080
    condition: "^/auth/change-password$"
    realPath: "/auth/change-password"
    summary: "Change user password"
    description: "Change user password"
    method: "PUT"
    headers:
      X-User-Token:
        description: "Bearer token for user authentication"
        required: true
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              Password:
                type: "string"
                example: "test"
              ConfirmPassword:
                type: "string"
                example: "test"
    responses:
      200:
        description: "Updated successfully."
      401:
        description: "Unauthorized or invalid credentials."


  ###------------------ Swagger ------------------###

  - name: "swagger-doc"
    host: "swagger-doc"
    port: 3000
    condition: "^/swagger/$"

  - name: "swagger-ui-css"
    host: "swagger-doc"
    port: 3000
    condition: "^/swagger/swagger-ui.css$"

  - name: "swagger-ui-bundle-js"
    host: "swagger-doc"
    port: 3000
    condition: "^/swagger/swagger-ui-bundle.js$"

  - name: "swagger-ui-standalone-preset-js"
    host: "swagger-doc"
    port: 3000
    condition: "^/swagger/swagger-ui-standalone-preset.js$"

  - name: "swagger-ui-init-js"
    host: "swagger-doc"
    port: 3000
    condition: "^/swagger/swagger-ui-init.js$"

  - name: "swagger-json"
    host: "swagger-doc"
    port: 3000
    condition: "^/swagger/swagger.json$"
