services:
  - name: test
    reactions:
      - name: log
        description: log to console as a reaction for testing
        commit:
          middleware: log

  - name: discord
    credentials:
      - name: token
        regex: "^*$"

    actions:
      - name: new_message
        description: action when a new message is received
        time: 30
        inputs:
          - name: channel_id
            regex: "^*$"

        fetch:
          strategy: hash
          middleware: log
          endpoint:
            method: get
            url: https://discord.com/api/v9/channels/$+channel_id/messages?limit=50
            headers: |
              {"Authorization": "$+token"}

    reactions:
      - name: send_message
        description: send a user defined message in a channel
        update_action: true
        inputs:
          - name: channel_id
            regex: "^*$"

          - name: message
            regex: "^*$"

        commit:
          endpoint:
              method: post
              url: https://discord.com/api/v9/channels/$+channel_id/messages
              headers: |
                {"Authorization": "$+token", "Content-Type": "application/json"}
              data: |
                {"content": "$+message", "flags": 0, "mobile_network_type": "unknown", "tts": false}
  
  - name: reddit
    credentials:
      - name: token
        regex: "^*$"
    
    actions:      
      - name: new_post_in_subreddit
        description: action when there is a new post in a subreddit
        time: 5
        inputs:
          - name: subreddit_name   # subreddit_name : steam
            regex: "^*$"

        fetch:
          strategy: reddit.strategy_new_post_in_subreddit
          endpoint:
            method: get
            url: https://oauth.reddit.com/r/$+subreddit_name/new?limit=1
            headers: |
              {"Authorization": "Bearer $+token", "User-Agent": "linux:area_last_chance:v1.0.0 (by /u/PapiYoshi)"}
    
    reactions:
      - name: create_post
        description: creates a post in a subreddit
        update_action: true
        inputs:
          - name: subreddit_name   # subreddit_name : steam
            regex: "^*$"
          - name: post_title   # post_title : New games on steam
            regex: "^*$"
          - name: post_text   # post_text : Overwatch 3, kingdom three cronws, etc...
            regex: "^*$"

        commit:
          middleware: log
          endpoint:
              method: post
              url: https://oauth.reddit.com/api/submit
              headers: |
                {"Authorization": "Bearer $+token", "User-Agent": "linux:area_last_chance:v1.0.0 (by /u/PapiYoshi)"}
              data: |
                {"sr": "$+subreddit_name", "kind": "self", "title": "$+post_title", "text": "$+post_text"}
      
      - name: subscribe_subreddit
        description: subscribes to a given subreddit
        update_action: true
        inputs:
          - name: subreddit_name   # subreddit_name : steam
            regex: "^*$"

        commit:
          endpoint:
              method: post
              url: https://oauth.reddit.com/api/subscribe
              headers: |
                {"Authorization": "Bearer $+token", "User-Agent": "linux:area_last_chance:v1.0.0 (by /u/PapiYoshi)"}
              data: |
                {"action": "sub", "action_source": "autosubscribe", "sr_name":"$+subreddit_name"}

      - name: unsubscribe_subreddit
        description: unsubscribes to a given subreddit
        update_action: true
        inputs:
          - name: subreddit_name   # subreddit_name : steam
            regex: "^*$"

        commit:
          endpoint:
              method: post
              url: https://oauth.reddit.com/api/subscribe
              headers: |
                {"Authorization": "Bearer $+token", "User-Agent": "linux:area_last_chance:v1.0.0 (by /u/PapiYoshi)"}
              data: |
                {"action": "unsub", "action_source": "onboarding", "sr_name":"$+subreddit_name", "skip_initial_defaults": False}

              # action
              # one of (sub, unsub)

              # action_source
              # one of (onboarding, autosubscribe)

              # skip_initial_defaults
              # boolean value

              # sr / sr_name
              # A comma-separated list of subreddit fullnames (when using the "sr" parameter), or of subreddit names (when using the "sr_name" parameter).

  - name: github
    credentials:
      - name: token
        regex: "^*$"
    
    actions:
      - name: commit_in_repo
        description: action when there is a new commit in a github repository main branch
        time: 5
        inputs:
          - name: repository_owner   # repository_owner : BhuvanArn
            regex: "^*$"
          - name: repository_name   # repository_name : A.R.E.A
            regex: "^*$"

        fetch:
          strategy: hash
          endpoint:
            method: get
            url: https://api.github.com/repos/$+repository_owner/$+repository_name/commits
            headers: |
              {"Authorization": "Bearer $+token", "Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28"}
      
      - name: commit_in_repo_branch
        description: action when there is a new commit in a github repository branch
        time: 5
        inputs:
          - name: repository_owner   # repository_owner : BhuvanArn
            regex: "^*$"
          - name: repository_name   # repository_name : A.R.E.A
            regex: "^*$"
          - name: repository_branch   # repository_name : AREA-103-Dropbox-OAuth-workflow
            regex: "^*$"

        fetch:
          strategy: hash
          endpoint:
            method: get
            url: https://api.github.com/repos/$+repository_owner/$+repository_name/commits/$+repository_branch
            headers: |
              {"Authorization": "Bearer $+token", "Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28"}
    
    reactions:
      - name: create_issue
        description: creates an issue on a github repository
        update_action: true
        inputs:
          - name: repository_owner   # repository_owner : BhuvanArn
            regex: "^*$"
          - name: repository_name   # repository_name : A.R.E.A
            regex: "^*$"

          - name: issue_title         # issue_title : Fix CI build on debian
            regex: "^*$"
          - name: issue_description      # issue_description : There was a build error, ... we should fix it.
            regex: "^*$"

        commit:
          endpoint:
              method: post
              url: https://api.github.com/repos/$+repository_owner/$+repository_name/issues
              headers: |
                {"Authorization": "Bearer $+token", "Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28"}
              data: |
                {"title": "$+issue_title", "body": "$+issue_description"}

      - name: create_pull_request
        description: creates a pull request on a github repository
        update_action: true
        inputs:
          - name: repository_owner   # repository_owner : BhuvanArn
            regex: "^*$"
          - name: repository_name   # repository_name : A.R.E.A
            regex: "^*$"

          - name: pull_request_title     # pull_request_title : Amazing new feature
            regex: "^*$"
          - name: pull_request_description      # pull_request_description : Please pull these awesome changes in!
            regex: "^*$"

          - name: head_branch_name      # head_branch_name : new-user-feature
            regex: "^*$"
          - name: base_branch_name      # base_branch_name : main
            regex: "^*$"

        commit:
          endpoint:
              method: post
              url: https://api.github.com/repos/$+repository_owner/$+repository_name/pulls
              headers: |
                {"Authorization": "Bearer $+token", "Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28"}
              data: |
                {"title": "$+pull_request_title", "body": "$+pull_request_description", "head":"$+head_branch_name", "base":"$+base_branch_name"}

  - name: spotify
    credentials:
      - name: token
        regex: "^*$"
    
    actions:
      - name: artist_albums
        description: action when a new album is released by an artist
        time: 60
        inputs:
          - name: artist_id   # artist_id : 6e3pZKXUxrPfnUPJ960Hd9
            regex: "^*$"

        fetch:
          strategy: hash
          middleware: log
          endpoint:
            method: get
            url: https://api.spotify.com/v1/artists/$+artist_id/albums
            headers: |
              {"Authorization": "Bearer $+token"}

      - name: playback_playing_continuously
        description: action when the playback is playing (triggers continuously)
        time: 1

        fetch:
          strategy: spotify.strategy_playback_playing_continuously
          endpoint:
            method: get
            url: https://api.spotify.com/v1/me/player
            headers: |
              {"Authorization": "Bearer $+token"}

      - name: playback_playing_once
        description: action when the playback is playing (triggers only once)
        time: 1

        fetch:
          strategy: spotify.strategy_playback_playing_once
          endpoint:
            method: get
            url: https://api.spotify.com/v1/me/player
            headers: |
              {"Authorization": "Bearer $+token"}
    
    reactions:
      - name: save_albums
        description: save a list of albums into user profile
        update_action: true
        inputs:
          - name: album_ids    # albums_ids : ["2kz6FGzMkZUyGZPywlkcOu", "3Iq43NGfIN8tc8AVJ9Konz", ...]
            regex: "^*$"

        commit:
          endpoint:
              method: put
              url: https://api.spotify.com/v1/me/albums
              headers: |
                {"Authorization": "Bearer $+token"}
              data: |
                {"ids": $+album_ids}

      - name: delete_albums
        description: delete a list of albums from user profile
        update_action: true
        inputs:
          - name: album_ids   # albums_ids : ["2kz6FGzMkZUyGZPywlkcOu", "3Iq43NGfIN8tc8AVJ9Konz", ...]
            regex: "^*$"

        commit:
          endpoint:
              method: delete
              url: https://api.spotify.com/v1/me/albums
              headers: |
                {"Authorization": "Bearer $+token"}
              data: |
                {"ids": $+album_ids}

  - name: dropbox
    credentials:
      - name: token
        regex: "^*$"

    actions:
      - name: search_file
        description: action when a file given in parameters is found in files
        time: 5
        inputs:
          - name: file_name     # File path : /my_icon_file.png
            regex: "^*$"

        fetch:
          strategy: dropbox.strategy_file_search
          endpoint:
            method: post
            url: https://api.dropboxapi.com/2/files/search_v2
            headers: |
              {"Authorization": "Bearer $+token", "Content-Type": "application/json"}
            data: |
              {"query": "$+file_name"}

    reactions:
      - name: create_folders
        description: creates one or multiple folders
        update_action: true
        inputs:
          - name: folders_name  # List of folder :  ["/folder1", "/folder2"]
            regex: "^*$"

        commit:
          endpoint:
              method: post
              url: https://api.dropboxapi.com/2/files/create_folder_batch
              headers: |
                {"Authorization": "Bearer $+token", "Content-Type": "application/json"}
              data: |
                {"paths": $+folders_name}

      - name: delete_files_and_folders
        description: delete one or multiple files or folders
        update_action: true
        inputs:
          - name: path_names   # List of path :  [{"path":"/folder1"}, {"path":"/folder2"}, {"path":"/file1.txt"}]
            regex: "^*$"

        commit:
          endpoint:
              method: post
              url: https://api.dropboxapi.com/2/files/delete_batch
              headers: |
                {"Authorization": "Bearer $+token", "Content-Type": "application/json"}
              data: |
                {"entries": $+path_names}

      - name: copy_file_or_folder
        description: copy a file or folder into another file or folder
        update_action: true
        inputs:
          - name: from_path   # File path : /my_icon_file.png
            regex: "^*$"

          - name: to_path     # File path : /my_new_icon_file.png
            regex: "^*$"

        commit:
          endpoint:
              method: post
              url: https://api.dropboxapi.com/2/files/copy_v2
              headers: |
                {"Authorization": "Bearer $+token", "Content-Type": "application/json"}
              data: |
                {"from_path": "$+from_path", "to_path": "$+to_path"}

  - name: timer
    actions:
      - name: only_time
        description: reached onetime marker
        inputs:
          - name: marker
            regex: "^*$"
        fetch:
          strategy: timer.strategy_only_time
          middleware: timer.middleware_only_time
        time: 1

      - name: on_time_daily
        description: reached time in day marker
        inputs:
          - name: marker
            regex: "^*$"
        fetch:
          strategy: timer.strategy_on_time_daily
          middleware: timer.middleware_on_time_daily
        time: 1

      - name: on_date_monthly
        description: reached date in month marker
        inputs:
          - name: marker
            regex: "^*$"
        fetch:
          strategy: timer.strategy_on_date_monthly
          middleware: timer.middleware_on_date_monthly
        time: 1

      - name: on_date_yearly
        description: reached date in month marker
        inputs:
          - name: marker
            regex: "^*$"
        fetch:
          strategy: timer.strategy_on_date_yearly
          middleware: timer.middleware_on_date_yearly
        time: 1

      - name: on_day
        description: reached certain day of the week marker
        inputs:
          - name: marker
            regex: "^*$"
        fetch:
          strategy: timer.strategy_on_day
          middleware: timer.middleware_on_day
        time: 1

      - name: every
        description: every x time action
        inputs:
          - name: time
            regex: "^*$"
        fetch:
          strategy: timer.strategy_every
          middleware: timer.middleware_every
        time: 1
